#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Jan 18, 2020 04:49:30 PM CET  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import GUI_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    GUI_support.set_Tk_var()
    top = Toplevel1 (root)
    GUI_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    GUI_support.set_Tk_var()
    top = Toplevel1 (w)
    GUI_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("935x725+356+176")
        top.minsize(120, 1)
        top.maxsize(3204, 1061)
        top.resizable(1, 1)
        top.title("Bioinformatics")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.TNotebook1 = ttk.Notebook(top)
        self.TNotebook1.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
        self.TNotebook1.configure(takefocus="")
        self.TNotebook1_t0 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t0, padding=3)
        self.TNotebook1.tab(0, text="MSA Calculator", compound="left"
                ,underline="-1", )
        self.TNotebook1_t0.configure(background="#d9d9d9")
        self.TNotebook1_t0.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t0.configure(highlightcolor="black")
        self.TNotebook1_t1 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t1, padding=3)
        self.TNotebook1.tab(1, text="MSA Converter", compound="none"
                ,underline="-1", )
        self.TNotebook1_t1.configure(background="#d9d9d9")
        self.TNotebook1_t1.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t1.configure(highlightcolor="black")
        self.TNotebook1_t2 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t2, padding=3)
        self.TNotebook1.tab(2, text="Phylogenetic Trees", compound="left"
                ,underline="-1", )
        self.TNotebook1_t2.configure(background="#d9d9d9")
        self.TNotebook1_t2.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t2.configure(highlightcolor="black")
        self.TNotebook1_t3 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t3, padding=3)
        self.TNotebook1.tab(3, text="Tree constructor", compound="none"
                ,underline="-1", )
        self.TNotebook1_t3.configure(background="#d9d9d9")
        self.TNotebook1_t3.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t3.configure(highlightcolor="black")
        self.TNotebook1_t4 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t4, padding=3)
        self.TNotebook1.tab(4, text="Consensus Trees", compound="none"
                ,underline="-1", )
        self.TNotebook1_t4.configure(background="#d9d9d9")
        self.TNotebook1_t4.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t4.configure(highlightcolor="black")

        self.Label1 = tk.Label(self.TNotebook1_t0)
        self.Label1.place(relx=0.569, rely=0.057, height=31, width=54)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''MSA''')

        self.SelectProgram = ttk.Combobox(self.TNotebook1_t0)
        self.SelectProgram.place(relx=0.064, rely=0.858, relheight=0.03
                , relwidth=0.154)
        set_methods = self.SelectProgram.register(GUI_support.set_methods)
        self.SelectProgram.configure(invalidcommand=(set_methods))
        self.SelectProgram.configure(textvariable=GUI_support.combobox)
        self.SelectProgram.configure(takefocus="")

        self.CalculateDefault = tk.Button(self.TNotebook1_t0)
        self.CalculateDefault.place(relx=0.322, rely=0.858, height=24, width=88)
        self.CalculateDefault.configure(activebackground="#ececec")
        self.CalculateDefault.configure(activeforeground="#000000")
        self.CalculateDefault.configure(background="#d9d9d9")
        self.CalculateDefault.configure(command=GUI_support.calculate_default)
        self.CalculateDefault.configure(disabledforeground="#a3a3a3")
        self.CalculateDefault.configure(foreground="#000000")
        self.CalculateDefault.configure(highlightbackground="#d9d9d9")
        self.CalculateDefault.configure(highlightcolor="black")
        self.CalculateDefault.configure(pady="0")
        self.CalculateDefault.configure(text='''Calculate MSA''')

        self.Label2 = tk.Label(self.TNotebook1_t0)
        self.Label2.place(relx=0.043, rely=0.057, height=21, width=62)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Sequences''')

        self.LoadFileButton = tk.Button(self.TNotebook1_t0)
        self.LoadFileButton.place(relx=0.043, rely=0.529, height=24, width=95)
        self.LoadFileButton.configure(activebackground="#ececec")
        self.LoadFileButton.configure(activeforeground="#000000")
        self.LoadFileButton.configure(background="#d9d9d9")
        self.LoadFileButton.configure(command=GUI_support.load_file)
        self.LoadFileButton.configure(disabledforeground="#a3a3a3")
        self.LoadFileButton.configure(foreground="#000000")
        self.LoadFileButton.configure(highlightbackground="#d9d9d9")
        self.LoadFileButton.configure(highlightcolor="black")
        self.LoadFileButton.configure(pady="0")
        self.LoadFileButton.configure(text='''Load sequences''')

        self.OutputText = ScrolledText(self.TNotebook1_t0)
        self.OutputText.place(relx=0.58, rely=0.114, relheight=0.388
                , relwidth=0.409)
        self.OutputText.configure(background="white")
        self.OutputText.configure(blockcursor="1")
        self.OutputText.configure(font="TkTextFont")
        self.OutputText.configure(foreground="black")
        self.OutputText.configure(highlightbackground="#d9d9d9")
        self.OutputText.configure(highlightcolor="black")
        self.OutputText.configure(insertbackground="black")
        self.OutputText.configure(insertborderwidth="3")
        self.OutputText.configure(selectbackground="#c4c4c4")
        self.OutputText.configure(selectforeground="black")
        self.OutputText.configure(state='disabled')
        self.OutputText.configure(wrap="none")

        self.InputText = ScrolledText(self.TNotebook1_t0)
        self.InputText.place(relx=0.043, rely=0.114, relheight=0.402
                , relwidth=0.431)
        self.InputText.configure(background="white")
        self.InputText.configure(font="TkTextFont")
        self.InputText.configure(foreground="black")
        self.InputText.configure(highlightbackground="#d9d9d9")
        self.InputText.configure(highlightcolor="black")
        self.InputText.configure(insertbackground="black")
        self.InputText.configure(insertborderwidth="3")
        self.InputText.configure(selectbackground="#c4c4c4")
        self.InputText.configure(selectforeground="black")
        self.InputText.configure(wrap="none")

        self.Consensus = ScrolledText(self.TNotebook1_t0)
        self.Consensus.place(relx=0.58, rely=0.572, relheight=0.073
                , relwidth=0.409)
        self.Consensus.configure(background="white")
        self.Consensus.configure(font="TkTextFont")
        self.Consensus.configure(foreground="black")
        self.Consensus.configure(highlightbackground="#d9d9d9")
        self.Consensus.configure(highlightcolor="black")
        self.Consensus.configure(insertbackground="black")
        self.Consensus.configure(insertborderwidth="3")
        self.Consensus.configure(selectbackground="#c4c4c4")
        self.Consensus.configure(selectforeground="black")
        self.Consensus.configure(wrap="none")

        self.PSSM = ScrolledText(self.TNotebook1_t0)
        self.PSSM.place(relx=0.58, rely=0.773, relheight=0.202, relwidth=0.409)
        self.PSSM.configure(background="white")
        self.PSSM.configure(font="TkTextFont")
        self.PSSM.configure(foreground="black")
        self.PSSM.configure(highlightbackground="#d9d9d9")
        self.PSSM.configure(highlightcolor="black")
        self.PSSM.configure(insertbackground="black")
        self.PSSM.configure(insertborderwidth="3")
        self.PSSM.configure(selectbackground="#c4c4c4")
        self.PSSM.configure(selectforeground="black")
        self.PSSM.configure(wrap="none")

        self.Label3 = tk.Label(self.TNotebook1_t0)
        self.Label3.place(relx=0.58, rely=0.529, height=21, width=93)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Consensus word''')

        self.Label4 = tk.Label(self.TNotebook1_t0)
        self.Label4.place(relx=0.58, rely=0.73, height=21, width=173)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''Position Specific Scoring Matrix''')

        self.ConvertButton = tk.Button(self.TNotebook1_t1)
        self.ConvertButton.place(relx=0.43, rely=0.343, height=34, width=147)
        self.ConvertButton.configure(activebackground="#ececec")
        self.ConvertButton.configure(activeforeground="#000000")
        self.ConvertButton.configure(background="#d9d9d9")
        self.ConvertButton.configure(command=GUI_support.convert_file)
        self.ConvertButton.configure(disabledforeground="#a3a3a3")
        self.ConvertButton.configure(foreground="#000000")
        self.ConvertButton.configure(highlightbackground="#d9d9d9")
        self.ConvertButton.configure(highlightcolor="black")
        self.ConvertButton.configure(pady="0")
        self.ConvertButton.configure(text='''Convert''')

        self.Button1 = tk.Button(self.TNotebook1_t1)
        self.Button1.place(relx=0.14, rely=0.815, height=54, width=127)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(command=GUI_support.load_file_to_convert)
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Load file''')

        self.FileToConvertNameLabel = tk.Label(self.TNotebook1_t1)
        self.FileToConvertNameLabel.place(relx=0.032, rely=0.73, height=31
                , width=334)
        self.FileToConvertNameLabel.configure(activebackground="#f9f9f9")
        self.FileToConvertNameLabel.configure(activeforeground="black")
        self.FileToConvertNameLabel.configure(background="#d9d9d9")
        self.FileToConvertNameLabel.configure(disabledforeground="#a3a3a3")
        self.FileToConvertNameLabel.configure(foreground="#000000")
        self.FileToConvertNameLabel.configure(highlightbackground="#d9d9d9")
        self.FileToConvertNameLabel.configure(highlightcolor="black")
        self.FileToConvertNameLabel.configure(textvariable=GUI_support.FileToConvertName)

        self.FileToConvertText = ScrolledText(self.TNotebook1_t1)
        self.FileToConvertText.place(relx=0.032, rely=0.043, relheight=0.66
                , relwidth=0.366)
        self.FileToConvertText.configure(background="white")
        self.FileToConvertText.configure(font="TkTextFont")
        self.FileToConvertText.configure(foreground="black")
        self.FileToConvertText.configure(highlightbackground="#d9d9d9")
        self.FileToConvertText.configure(highlightcolor="black")
        self.FileToConvertText.configure(insertbackground="black")
        self.FileToConvertText.configure(insertborderwidth="3")
        self.FileToConvertText.configure(selectbackground="#c4c4c4")
        self.FileToConvertText.configure(selectforeground="black")
        self.FileToConvertText.configure(state='disabled')
        self.FileToConvertText.configure(wrap="none")

        self.ConvertedFileText = ScrolledText(self.TNotebook1_t1)
        self.ConvertedFileText.place(relx=0.612, rely=0.043, relheight=0.66
                , relwidth=0.377)
        self.ConvertedFileText.configure(background="white")
        self.ConvertedFileText.configure(font="TkTextFont")
        self.ConvertedFileText.configure(foreground="black")
        self.ConvertedFileText.configure(highlightbackground="#d9d9d9")
        self.ConvertedFileText.configure(highlightcolor="black")
        self.ConvertedFileText.configure(insertbackground="black")
        self.ConvertedFileText.configure(insertborderwidth="3")
        self.ConvertedFileText.configure(selectbackground="#c4c4c4")
        self.ConvertedFileText.configure(selectforeground="black")
        self.ConvertedFileText.configure(state='disabled')
        self.ConvertedFileText.configure(wrap="none")

        self.ConvertedFileNameLabel = ttk.Label(self.TNotebook1_t1)
        self.ConvertedFileNameLabel.place(relx=0.612, rely=0.73, height=39
                , width=344)
        self.ConvertedFileNameLabel.configure(background="#d9d9d9")
        self.ConvertedFileNameLabel.configure(foreground="#000000")
        self.ConvertedFileNameLabel.configure(font="TkDefaultFont")
        self.ConvertedFileNameLabel.configure(relief="flat")
        self.ConvertedFileNameLabel.configure(textvariable=GUI_support.ConvertedFileName)

        self.TreeCanvas = tk.Canvas(self.TNotebook1_t2)
        self.TreeCanvas.place(relx=0.15, rely=0.0, relheight=0.691
                , relwidth=0.691)
        self.TreeCanvas.configure(background="#d9d9d9")
        self.TreeCanvas.configure(borderwidth="2")
        self.TreeCanvas.configure(highlightbackground="#d9d9d9")
        self.TreeCanvas.configure(highlightcolor="black")
        self.TreeCanvas.configure(insertbackground="black")
        self.TreeCanvas.configure(relief="ridge")
        self.TreeCanvas.configure(selectbackground="#c4c4c4")
        self.TreeCanvas.configure(selectforeground="black")

        self.LoadTree = tk.Button(self.TNotebook1_t2)
        self.LoadTree.place(relx=0.021, rely=0.215, height=54, width=107)
        self.LoadTree.configure(activebackground="#ececec")
        self.LoadTree.configure(activeforeground="#000000")
        self.LoadTree.configure(background="#d9d9d9")
        self.LoadTree.configure(command=GUI_support.load_tree)
        self.LoadTree.configure(disabledforeground="#a3a3a3")
        self.LoadTree.configure(foreground="#000000")
        self.LoadTree.configure(highlightbackground="#d9d9d9")
        self.LoadTree.configure(highlightcolor="black")
        self.LoadTree.configure(pady="0")
        self.LoadTree.configure(text='''Load Tree''')

        self.AncestorEntry = tk.Entry(self.TNotebook1_t2)
        self.AncestorEntry.place(relx=0.14, rely=0.744, height=20
                , relwidth=0.176)
        self.AncestorEntry.configure(background="white")
        self.AncestorEntry.configure(disabledforeground="#a3a3a3")
        self.AncestorEntry.configure(font="TkFixedFont")
        self.AncestorEntry.configure(foreground="#000000")
        self.AncestorEntry.configure(highlightbackground="#d9d9d9")
        self.AncestorEntry.configure(highlightcolor="black")
        self.AncestorEntry.configure(insertbackground="black")
        self.AncestorEntry.configure(selectbackground="#c4c4c4")
        self.AncestorEntry.configure(selectforeground="black")

        self.Button3 = tk.Button(self.TNotebook1_t2)
        self.Button3.place(relx=0.344, rely=0.744, height=24, width=138)
        self.Button3.configure(activebackground="#ececec")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(command=GUI_support.common_ancestor)
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''Find Common Ancestor''')

        self.PathLeaf = tk.Entry(self.TNotebook1_t2)
        self.PathLeaf.place(relx=0.14, rely=0.787,height=20, relwidth=0.176)
        self.PathLeaf.configure(background="white")
        self.PathLeaf.configure(disabledforeground="#a3a3a3")
        self.PathLeaf.configure(font="TkFixedFont")
        self.PathLeaf.configure(foreground="#000000")
        self.PathLeaf.configure(highlightbackground="#d9d9d9")
        self.PathLeaf.configure(highlightcolor="black")
        self.PathLeaf.configure(insertbackground="black")
        self.PathLeaf.configure(selectbackground="#c4c4c4")
        self.PathLeaf.configure(selectforeground="black")

        self.bsadasdasdasd = tk.Button(self.TNotebook1_t2)
        self.bsadasdasdasd.place(relx=0.344, rely=0.787, height=24, width=119)
        self.bsadasdasdasd.configure(activebackground="#ececec")
        self.bsadasdasdasd.configure(activeforeground="#000000")
        self.bsadasdasdasd.configure(background="#d9d9d9")
        self.bsadasdasdasd.configure(command=GUI_support.draw_path)
        self.bsadasdasdasd.configure(disabledforeground="#a3a3a3")
        self.bsadasdasdasd.configure(foreground="#000000")
        self.bsadasdasdasd.configure(highlightbackground="#d9d9d9")
        self.bsadasdasdasd.configure(highlightcolor="black")
        self.bsadasdasdasd.configure(pady="0")
        self.bsadasdasdasd.configure(text='''Draw path from root''')

        self.NumberOfLeafsLabel = tk.Label(self.TNotebook1_t2)
        self.NumberOfLeafsLabel.place(relx=0.849, rely=0.0, height=41, width=134)

        self.NumberOfLeafsLabel.configure(activebackground="#f9f9f9")
        self.NumberOfLeafsLabel.configure(activeforeground="black")
        self.NumberOfLeafsLabel.configure(background="#d9d9d9")
        self.NumberOfLeafsLabel.configure(disabledforeground="#a3a3a3")
        self.NumberOfLeafsLabel.configure(foreground="#000000")
        self.NumberOfLeafsLabel.configure(highlightbackground="#d9d9d9")
        self.NumberOfLeafsLabel.configure(highlightcolor="black")
        self.NumberOfLeafsLabel.configure(textvariable=GUI_support.NumberOfLeafs)

        self.DistanceFromRoot = tk.Label(self.TNotebook1_t2)
        self.DistanceFromRoot.place(relx=0.505, rely=0.787, height=21, width=6)
        self.DistanceFromRoot.configure(activebackground="#f9f9f9")
        self.DistanceFromRoot.configure(activeforeground="black")
        self.DistanceFromRoot.configure(background="#d9d9d9")
        self.DistanceFromRoot.configure(disabledforeground="#a3a3a3")
        self.DistanceFromRoot.configure(foreground="#000000")
        self.DistanceFromRoot.configure(highlightbackground="#d9d9d9")
        self.DistanceFromRoot.configure(highlightcolor="black")

        self.TreeLengthLabel = tk.Label(self.TNotebook1_t2)
        self.TreeLengthLabel.place(relx=0.849, rely=0.072, height=91, width=134)
        self.TreeLengthLabel.configure(activebackground="#f9f9f9")
        self.TreeLengthLabel.configure(activeforeground="black")
        self.TreeLengthLabel.configure(background="#d9d9d9")
        self.TreeLengthLabel.configure(disabledforeground="#a3a3a3")
        self.TreeLengthLabel.configure(foreground="#000000")
        self.TreeLengthLabel.configure(highlightbackground="#d9d9d9")
        self.TreeLengthLabel.configure(highlightcolor="black")
        self.TreeLengthLabel.configure(textvariable=GUI_support.TreeLength)
        self.TreeLengthLabel.configure(wraplength="80")

        self.DistanceEntry1 = tk.Entry(self.TNotebook1_t2)
        self.DistanceEntry1.place(relx=0.14, rely=0.83, height=20
                , relwidth=0.176)
        self.DistanceEntry1.configure(background="white")
        self.DistanceEntry1.configure(disabledforeground="#a3a3a3")
        self.DistanceEntry1.configure(font="TkFixedFont")
        self.DistanceEntry1.configure(foreground="#000000")
        self.DistanceEntry1.configure(highlightbackground="#d9d9d9")
        self.DistanceEntry1.configure(highlightcolor="black")
        self.DistanceEntry1.configure(insertbackground="black")
        self.DistanceEntry1.configure(selectbackground="#c4c4c4")
        self.DistanceEntry1.configure(selectforeground="black")

        self.DistanceEntry2 = tk.Entry(self.TNotebook1_t2)
        self.DistanceEntry2.place(relx=0.333, rely=0.83, height=20
                , relwidth=0.176)
        self.DistanceEntry2.configure(background="white")
        self.DistanceEntry2.configure(disabledforeground="#a3a3a3")
        self.DistanceEntry2.configure(font="TkFixedFont")
        self.DistanceEntry2.configure(foreground="#000000")
        self.DistanceEntry2.configure(highlightbackground="#d9d9d9")
        self.DistanceEntry2.configure(highlightcolor="black")
        self.DistanceEntry2.configure(insertbackground="black")
        self.DistanceEntry2.configure(selectbackground="#c4c4c4")
        self.DistanceEntry2.configure(selectforeground="black")

        self.Button4 = tk.Button(self.TNotebook1_t2)
        self.Button4.place(relx=0.526, rely=0.83, height=24, width=108)
        self.Button4.configure(activebackground="#ececec")
        self.Button4.configure(activeforeground="#000000")
        self.Button4.configure(background="#d9d9d9")
        self.Button4.configure(command=GUI_support.calculate_distance)
        self.Button4.configure(disabledforeground="#a3a3a3")
        self.Button4.configure(foreground="#000000")
        self.Button4.configure(highlightbackground="#d9d9d9")
        self.Button4.configure(highlightcolor="black")
        self.Button4.configure(pady="0")
        self.Button4.configure(text='''Calculate Distance''')

        self.Label5 = tk.Label(self.TNotebook1_t2)
        self.Label5.place(relx=0.666, rely=0.83, height=31, width=114)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(activeforeground="black")
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(highlightbackground="#d9d9d9")
        self.Label5.configure(highlightcolor="black")
        self.Label5.configure(textvariable=GUI_support.distance)

        self.Button5 = tk.Button(self.TNotebook1_t3)
        self.Button5.place(relx=0.032, rely=0.057, height=24, width=65)
        self.Button5.configure(activebackground="#ececec")
        self.Button5.configure(activeforeground="#000000")
        self.Button5.configure(background="#d9d9d9")
        self.Button5.configure(command=GUI_support.load_msa_for_tree)
        self.Button5.configure(disabledforeground="#a3a3a3")
        self.Button5.configure(foreground="#000000")
        self.Button5.configure(highlightbackground="#d9d9d9")
        self.Button5.configure(highlightcolor="black")
        self.Button5.configure(pady="0")
        self.Button5.configure(text='''Load MSA''')

        self.Label6 = tk.Label(self.TNotebook1_t3)
        self.Label6.place(relx=0.011, rely=0.114, height=31, width=256)
        self.Label6.configure(background="#d9d9d9")
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(foreground="#000000")
        self.Label6.configure(textvariable=GUI_support.loaded_msa_tree)

        self.Button6 = tk.Button(self.TNotebook1_t3)
        self.Button6.place(relx=0.097, rely=0.873, height=24, width=123)
        self.Button6.configure(activebackground="#ececec")
        self.Button6.configure(activeforeground="#000000")
        self.Button6.configure(background="#d9d9d9")
        self.Button6.configure(command=GUI_support.create_tree_distance)
        self.Button6.configure(disabledforeground="#a3a3a3")
        self.Button6.configure(foreground="#000000")
        self.Button6.configure(highlightbackground="#d9d9d9")
        self.Button6.configure(highlightcolor="black")
        self.Button6.configure(pady="0")
        self.Button6.configure(text='''Create tree (distance)''')

        self.AlgorithmCombo = ttk.Combobox(self.TNotebook1_t3)
        self.AlgorithmCombo.place(relx=0.118, rely=0.801, relheight=0.03
                , relwidth=0.154)
        self.AlgorithmCombo.configure(textvariable=GUI_support.combobox)
        self.AlgorithmCombo.configure(takefocus="")

        self.Label7 = tk.Label(self.TNotebook1_t3)
        self.Label7.place(relx=0.021, rely=0.801, height=21, width=60)
        self.Label7.configure(background="#d9d9d9")
        self.Label7.configure(disabledforeground="#a3a3a3")
        self.Label7.configure(foreground="#000000")
        self.Label7.configure(text='''Algorithm''')

        self.Button7 = tk.Button(self.TNotebook1_t3)
        self.Button7.place(relx=0.655, rely=0.873, height=24, width=135)
        self.Button7.configure(activebackground="#ececec")
        self.Button7.configure(activeforeground="#000000")
        self.Button7.configure(background="#d9d9d9")
        self.Button7.configure(command=GUI_support.create_tree_parsimony)
        self.Button7.configure(disabledforeground="#a3a3a3")
        self.Button7.configure(foreground="#000000")
        self.Button7.configure(highlightbackground="#d9d9d9")
        self.Button7.configure(highlightcolor="black")
        self.Button7.configure(pady="0")
        self.Button7.configure(text='''Create tree (parsimony)''')

        self.CreatedTreeCanvas = tk.Canvas(self.TNotebook1_t3)
        self.CreatedTreeCanvas.place(relx=0.29, rely=0.029, relheight=0.691
                , relwidth=0.691)
        self.CreatedTreeCanvas.configure(background="#d9d9d9")
        self.CreatedTreeCanvas.configure(borderwidth="2")
        self.CreatedTreeCanvas.configure(insertbackground="black")
        self.CreatedTreeCanvas.configure(relief="ridge")
        self.CreatedTreeCanvas.configure(selectbackground="#c4c4c4")
        self.CreatedTreeCanvas.configure(selectforeground="black")

        self.Button2 = tk.Button(self.TNotebook1_t4)
        self.Button2.place(relx=0.29, rely=0.744, height=24, width=65)
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(command=GUI_support.load_consensus_trees)
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Load trees''')

        self.ConsensusTreeCanvas = tk.Canvas(self.TNotebook1_t4)
        self.ConsensusTreeCanvas.place(relx=0.279, rely=0.014, relheight=0.691
                , relwidth=0.691)
        self.ConsensusTreeCanvas.configure(background="#d9d9d9")
        self.ConsensusTreeCanvas.configure(borderwidth="2")
        self.ConsensusTreeCanvas.configure(insertbackground="black")
        self.ConsensusTreeCanvas.configure(relief="ridge")
        self.ConsensusTreeCanvas.configure(selectbackground="#c4c4c4")
        self.ConsensusTreeCanvas.configure(selectforeground="black")

        self.Label8 = tk.Label(self.TNotebook1_t4)
        self.Label8.place(relx=0.537, rely=0.715, height=51, width=204)
        self.Label8.configure(background="#d9d9d9")
        self.Label8.configure(disabledforeground="#a3a3a3")
        self.Label8.configure(foreground="#000000")
        self.Label8.configure(text='''Consensus Tree''')

        self.Label9 = tk.Label(self.TNotebook1_t4)
        self.Label9.place(relx=0.032, rely=0.129, height=21, width=37)
        self.Label9.configure(background="#d9d9d9")
        self.Label9.configure(disabledforeground="#a3a3a3")
        self.Label9.configure(foreground="#000000")
        self.Label9.configure(text='''Mode''')

        self.Label10 = tk.Label(self.TNotebook1_t4)
        self.Label10.place(relx=0.032, rely=0.286, height=21, width=154)
        self.Label10.configure(background="#d9d9d9")
        self.Label10.configure(disabledforeground="#a3a3a3")
        self.Label10.configure(foreground="#000000")
        self.Label10.configure(text='''Cutoff(majority mode only)''')

        self.Cutoff = tk.Entry(self.TNotebook1_t4)
        self.Cutoff.place(relx=0.032, rely=0.329,height=20, relwidth=0.176)
        self.Cutoff.configure(background="white")
        self.Cutoff.configure(disabledforeground="#a3a3a3")
        self.Cutoff.configure(font="TkFixedFont")
        self.Cutoff.configure(foreground="#000000")
        self.Cutoff.configure(insertbackground="black")
        self.Cutoff.configure(textvariable=GUI_support.cutoff_value)

        self.ConsensusMode = ttk.Combobox(self.TNotebook1_t4)
        self.ConsensusMode.place(relx=0.032, rely=0.186, relheight=0.03
                , relwidth=0.154)
        self.ConsensusMode.configure(textvariable=GUI_support.combobox)
        self.ConsensusMode.configure(takefocus="")

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





