#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Jan 01, 2020 07:52:52 PM CET  platform: Windows NT
#    Jan 01, 2020 11:29:30 PM CET  platform: Windows NT
#    Jan 02, 2020 12:14:46 AM CET  platform: Windows NT
#    Jan 02, 2020 09:37:36 PM CET  platform: Windows NT
#    Jan 02, 2020 11:23:34 PM CET  platform: Windows NT
#    Jan 02, 2020 11:42:28 PM CET  platform: Windows NT
#    Jan 03, 2020 03:36:19 PM CET  platform: Windows NT
#    Jan 03, 2020 03:50:28 PM CET  platform: Windows NT
#    Jan 18, 2020 03:52:02 PM CET  platform: Windows NT
#    Jan 18, 2020 04:27:53 PM CET  platform: Windows NT
#    Jan 18, 2020 04:43:58 PM CET  platform: Windows NT
#    Jan 18, 2020 07:25:32 PM CET  platform: Windows NT

import sys
import time
from tkinter import filedialog

from PIL import Image
from PIL.ImageTk import PhotoImage

from tools.file_formats import supports
from funcs.LoadFile import load_sequence_from_file
from tools.alignment_tools import fetch_additional_data
from tools.clustal_tools import clustal_calculate_alignment
from tools.consensus_trees import load_consensus_trees_impl, CONSENSUS_MODES
from tools.file_converter import load_sequences_file, convert_file_impl
from tools.muscle_tools import muscle_calculate_alignment
from tools.programs_names import PROGRAM_NAMES_COMBOBOX
from tools.tree_construction import load_MSA_for_tree, create_tree_distance_impl, create_tree_parsimony_impl
from tools.tree_tools import load_tree_impl, common_ancestor_impl, route_impl, calculate_distance_impl

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def set_Tk_var():
    global combobox
    combobox = tk.StringVar()
    global FileToConvertName
    FileToConvertName = tk.StringVar()
    FileToConvertName.set('')
    global ConvertedFileName
    ConvertedFileName = tk.StringVar()
    ConvertedFileName.set('')
    global NumberOfLeafs
    NumberOfLeafs = tk.StringVar()
    NumberOfLeafs.set('')
    global TreeLength
    TreeLength = tk.StringVar()
    TreeLength.set('')
    global distance
    distance = tk.StringVar()
    distance.set('')
    global loaded_msa_tree
    loaded_msa_tree = tk.StringVar()
    loaded_msa_tree.set('')
    global cutoff_value
    cutoff_value = tk.StringVar()
    global combobox1
    combobox1 = tk.StringVar()
    global combobox2
    combobox2 = tk.StringVar()
    global combobox3
    combobox3 = tk.StringVar()

def load_consensus_trees():
    global cons_img
    files = filedialog.askopenfilenames(initialdir="../data/experiments/Trees", title="Select tree files", filetypes=[('newick','*.dnd'), ('All files',"*")])
    if not files:
        return 
    cons_mode = w.ConsensusMode.get()
    cons_img = PhotoImage(Image.open(load_consensus_trees_impl(files,cons_mode,cutoff_value.get())))
    w.ConsensusTreeCanvas.create_image(0, 0, image=cons_img, anchor=tk.NW)
    w.ConsensusTreeCanvas.update_idletasks()

def create_tree_distance():
    global created_tree_img
    if not (MSA_tree_construction is None):
        algorithm = w.AlgorithmCombo.get()
        imgPath = create_tree_distance_impl(MSA_tree_construction, algorithm)
        created_tree_img = PhotoImage(Image.open(imgPath))
        w.CreatedTreeCanvas.create_image(0, 0, image=created_tree_img, anchor=tk.NW)
        w.CreatedTreeCanvas.update_idletasks()
    else:
        return

def create_tree_parsimony():
    global created_tree_img2
    if not(MSA_tree_construction is None):
        imgPath= create_tree_parsimony_impl(MSA_tree_construction)
        created_tree_img2 = PhotoImage(Image.open(imgPath))
        w.CreatedTreeCanvas.create_image(0, 0, image=created_tree_img2, anchor=tk.NW)
        w.CreatedTreeCanvas.update_idletasks()
    else:
        return

def load_msa_for_tree():
    global MSA_tree_construction
    file = filedialog.askopenfilename(initialdir="../data", title="Select MSA file")
    MSA_tree_construction = load_MSA_for_tree(file)
    if MSA_tree_construction == "Unsupported format":
        MSA_tree_construction = None
    else:
        loaded_msa_tree.set(file)

def calculate_distance():
    entry1 = w.DistanceEntry1.get()
    entry2 = w.DistanceEntry2.get()
    distance.set(calculate_distance_impl(current_tree,entry1,entry2))

def draw_path():
    global path_img
    input = w.PathLeaf.get()
    tree_img = route_impl(current_tree, input)
    path_img = PhotoImage(Image.open(tree_img))
    w.TreeCanvas.create_image(0, 0, image=path_img, anchor=tk.NW)
    w.TreeCanvas.update_idletasks()

def common_ancestor():
    global anc_img
    input = w.AncestorEntry.get()
    children = input.split(',')
    tree_img = common_ancestor_impl(current_tree, children)
    anc_img = PhotoImage(Image.open(tree_img))
    w.TreeCanvas.create_image(0,0, image=anc_img, anchor=tk.NW)
    w.TreeCanvas.update_idletasks()

def load_tree():
    global img
    global current_tree
    file = filedialog.askopenfilename(initialdir="../data", title="Select tree file")
    current_tree = file
    tree_img, total_leafs, tree_length = load_tree_impl(file)
    img = PhotoImage(Image.open(tree_img))
    w.TreeCanvas.create_image(0,0, image=img, anchor=tk.NW)
    w.TreeCanvas.update_idletasks()
    NumberOfLeafs.set("Leafs: " + str(total_leafs))
    TreeLength.set("Tree length: " + str(tree_length))

def convert_file():
    file = filedialog.asksaveasfile(initialdir="../data",mode='w').name
    convert_result = convert_file_impl(current_converter_file,file)
    if convert_result == "Unsupported format":
        ConvertedFileName.set("")
    else:
        ConvertedFileName.set(file)
    w.ConvertedFileText.configure(state='normal')
    w.ConvertedFileText.delete(1.0, tk.END)
    w.ConvertedFileText.insert(tk.INSERT,convert_result)
    w.ConvertedFileText.configure(state='disabled')
    ConvertedFileName.set(file)

def load_file_to_convert():
    global current_converter_file
    file = filedialog.askopenfilename(initialdir="../data", title="Select file")
    load_result = load_sequences_file(file)
    w.FileToConvertText.configure(state='normal')
    w.FileToConvertText.delete(1.0, tk.END)
    w.FileToConvertText.configure(state='normal')
    w.FileToConvertText.insert(tk.INSERT, open(file,"r+").read())
    w.FileToConvertText.configure(state='disabled')
    if load_result == "Unsupported format":
        current_converter_file = None
        FileToConvertName.set("")
    else:
        current_converter_file = file
        FileToConvertName.set(file)

def calculate_default():
    selected_program = w.SelectProgram.get()
    w.OutputText.configure(state='normal')
    w.Consensus.configure(state='normal')
    w.PSSM.configure(state='normal')
    w.OutputText.delete(1.0, tk.END)
    w.Consensus.delete(1.0, tk.END)
    w.PSSM.delete(1.0, tk.END)

    if selected_program == "ClustalW":
        MSA = clustal_calculate_alignment(current_file,"")
    elif selected_program == "Muscle":
        MSA = muscle_calculate_alignment(current_file,"")

    consensus, PSSM = fetch_additional_data(MSA)
    w.Consensus.insert(tk.INSERT, str(consensus))
    w.PSSM.insert(tk.INSERT, str(PSSM))
    w.OutputText.insert(tk.INSERT, str(MSA))
    w.Consensus.configure(state='disabled')
    w.PSSM.configure(state='disabled')
    w.OutputText.configure(state='disabled')

def calculate_with_arguments():
    print('GUI_support.calculate_with_arguments')
    sys.stdout.flush()

def load_file():
    global current_file
    file = filedialog.askopenfilename(initialdir="../data", title="Select file")
    if supports(file):
        current_file = file
        sequences = load_sequence_from_file(file)
        w.InputText.configure(state='normal')
        w.InputText.delete(1.0, tk.END)
        w.InputText.insert(tk.INSERT, str(sequences))
        w.InputText.configure(state='disabled')
    else:
        current_file = None
        w.InputText.configure(state='normal')
        w.InputText.delete(1.0, tk.END)
        w.InputText.insert(tk.INSERT, "Unsupported format")
        w.InputText.configure(state='disabled')

def set_methods(*args):
    print('GUI_support.set_methods')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()
    return

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    w.SelectProgram['values'] = list(PROGRAM_NAMES_COMBOBOX)
    w.SelectProgram.current(0)
    w.AlgorithmCombo['values'] = list(['nj', 'upgma'])
    w.AlgorithmCombo.current(0)
    w.ConsensusMode['values'] = list(CONSENSUS_MODES)
    w.ConsensusMode.current(0)

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import GUI
    GUI.vp_start_gui()




